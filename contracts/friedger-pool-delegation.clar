(define-map pox-addr-indices uint uint)
(define-data-var pox-address {hashbytes: (buff 32), version: (buff 1)} {hashbytes: 0x, version: 0x})

(define-public (delegate-stx (amount-ustx uint))
  (let ((user-pox-addr (unwrap-panic (principal-destruct? tx-sender)))
        (user tx-sender)
        (start-burn-ht u100)
        (current-cycle u0))
    (try! (contract-call? .pox-delegation delegate-stx amount-ustx (as-contract tx-sender) none none {version: 0x01, hashbytes: (get hash-bytes user-pox-addr)} u1))
    (unwrap-panic (as-contract (contract-call? .pox-delegation delegate-stack-stx (list {user: user, amount-ustx: amount-ustx})
                          (var-get pox-address)
                          start-burn-ht
                          u1)))
    (try! (contract-call? .friedger-pool-sft mint current-cycle amount-ustx user))
    (let ((total-amount-stacked (contract-call? .pox-delegation get-total (as-contract tx-sender) (+ u1 current-cycle) u1)))
      (and (> total-amount-stacked (contract-call? 'ST000000000000000000002AMW42H.pox-2 get-stacking-minimum))
          (try! (match (stack-aggregation-commit current-cycle )
            success (ok success)
            error (err (to-uint error)))))
      (ok total-amount-stacked))))

(define-private (stack-aggregation-commit (current-cycle uint))
  (match (map-get? pox-addr-indices current-cycle)
            index (as-contract (contract-call? 'ST000000000000000000002AMW42H.pox-2 stack-aggregation-increase (var-get pox-address) current-cycle index))
            (match (as-contract (contract-call? 'ST000000000000000000002AMW42H.pox-2 stack-aggregation-commit-indexed (var-get pox-address) current-cycle))
              index (begin
                      (map-set pox-addr-indices current-cycle index)
                      (ok true))
              error (err error))))
